// <auto-generated />
using System;
using Boomerang.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Boomerang.Context.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190831172431_SeedPackageEnrollmentData")]
    partial class SeedPackageEnrollmentData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Boomerang.Models.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Audio Category",
                            Name = "audio",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.ComplexWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("ComplexWords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Classification = "SOURCES",
                            Description = "Live regex",
                            Name = "Live"
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.ComplexWordMap", b =>
                {
                    b.Property<int>("WordId");

                    b.Property<int>("ComplexWordId");

                    b.HasKey("WordId", "ComplexWordId");

                    b.HasIndex("ComplexWordId");

                    b.ToTable("ComplexWordMap");

                    b.HasData(
                        new
                        {
                            WordId = 35,
                            ComplexWordId = 1
                        },
                        new
                        {
                            WordId = 36,
                            ComplexWordId = 1
                        },
                        new
                        {
                            WordId = 37,
                            ComplexWordId = 1
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Affils")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<int>("SectionId");

                    b.Property<int>("SiteId");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("SiteId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Affils = "TSP,POW,ZZZZ,BPM",
                            SectionId = 1,
                            SiteId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Affils = "AAA, BBB, CCC, DDD",
                            SectionId = 1,
                            SiteId = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.IrcInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bot");

                    b.Property<string>("Channel");

                    b.Property<int>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("IrcInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bot = "pf-bot",
                            Channel = "pf-spam",
                            SiteId = 1
                        },
                        new
                        {
                            Id = 2,
                            Bot = "PiEcE",
                            Channel = "#puzzlefactory",
                            SiteId = 1
                        },
                        new
                        {
                            Id = 3,
                            Bot = "bh-bot",
                            Channel = "bh-spam",
                            SiteId = 2
                        },
                        new
                        {
                            Id = 4,
                            Bot = "bh",
                            Channel = "#biohazzard",
                            SiteId = 2
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Applicability")
                        .HasColumnType("int");

                    b.Property<int?>("ComplexWordId");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("WordId");

                    b.HasKey("Id");

                    b.HasIndex("ComplexWordId");

                    b.HasIndex("WordId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Applicability = 1,
                            Description = "Ban Web Resources",
                            Name = "Ban Web Resources",
                            WordId = 17
                        },
                        new
                        {
                            Id = 2,
                            Applicability = 1,
                            ComplexWordId = 1,
                            Description = "Ban Live Resources",
                            Name = "Ban Live Resources"
                        },
                        new
                        {
                            Id = 3,
                            Applicability = 1,
                            Description = "Ban Internal Resources",
                            Name = "Ban Internal Resources",
                            WordId = 6
                        },
                        new
                        {
                            Id = 4,
                            Applicability = 1,
                            Description = "Allow English Only",
                            Name = "Allow English Only",
                            WordId = 2
                        },
                        new
                        {
                            Id = 5,
                            Applicability = 1,
                            Description = "Allow EN|NL Only",
                            Name = "Allow EN|NL Only",
                            WordId = 3
                        },
                        new
                        {
                            Id = 6,
                            Applicability = 3,
                            Description = "Mp3 patterns",
                            Name = "Mp3 patterns",
                            WordId = 1
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.PackageEnrollment", b =>
                {
                    b.Property<int>("EnrollmentId");

                    b.Property<int>("PackageId");

                    b.HasKey("EnrollmentId", "PackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageEnrollments");

                    b.HasData(
                        new
                        {
                            EnrollmentId = 1,
                            PackageId = 1
                        },
                        new
                        {
                            EnrollmentId = 1,
                            PackageId = 2
                        },
                        new
                        {
                            EnrollmentId = 1,
                            PackageId = 3
                        },
                        new
                        {
                            EnrollmentId = 1,
                            PackageId = 4
                        },
                        new
                        {
                            EnrollmentId = 2,
                            PackageId = 1
                        },
                        new
                        {
                            EnrollmentId = 2,
                            PackageId = 2
                        },
                        new
                        {
                            EnrollmentId = 2,
                            PackageId = 3
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.PreDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bot")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("PreDbs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bot = "SIDB",
                            Channel = "#scumm-pre",
                            IsEnabled = false,
                            Name = "SIDB"
                        },
                        new
                        {
                            Id = 2,
                            Bot = "ARDB",
                            Channel = "#Panicpre",
                            IsEnabled = false,
                            Name = "ARDB"
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("Boomerang.Models.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BubbleLevel")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Delimiter")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<int>("PackageId");

                    b.Property<int>("RaceActivityInSeconds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PackageId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BubbleLevel = 0,
                            CategoryId = 1,
                            Delimiter = "-",
                            Description = "Mp3 Section",
                            IsEnabled = false,
                            Name = "Mp3",
                            PackageId = 1,
                            RaceActivityInSeconds = 600
                        },
                        new
                        {
                            Id = 2,
                            BubbleLevel = 0,
                            CategoryId = 1,
                            Delimiter = "-",
                            Description = "Flac Section",
                            IsEnabled = false,
                            Name = "Flac",
                            PackageId = 2,
                            RaceActivityInSeconds = 600
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxDownloadLogins")
                        .HasColumnType("int");

                    b.Property<int>("MaxUploadLogins")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(16)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Status");

                    b.Property<int>("TotalLogins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxDownloadLogins = 2,
                            MaxUploadLogins = 2,
                            Name = "PF",
                            Rank = 6,
                            Status = 1,
                            TotalLogins = 2
                        },
                        new
                        {
                            Id = 2,
                            MaxDownloadLogins = 2,
                            MaxUploadLogins = 2,
                            Name = "BH",
                            Rank = 6,
                            Status = 1,
                            TotalLogins = 2
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("IgnorePattern")
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Classification = "SECTION",
                            Description = "Mp3 section",
                            Name = "MP3",
                            Pattern = "(mp3)"
                        },
                        new
                        {
                            Id = 2,
                            Classification = "LANGUAGES",
                            Description = "English language only",
                            Name = "EN_ONLY",
                            Pattern = "[%delimiter%](aa|ab|ae|af|ak|am|an|ar|as|av|ay|az|ba|be|bg|bh|bi|bm|bn|bo|br|bs|ca|ce|ch|co|cr|cs|cu|cv|cy|da|de|dv|dz|ee|el|en|eo|es|et|eu|fa|ff|fi|fj|fo|fr|fy|ga|gd|gl|gn|gu|gv|ha|he|hi|ho|hr|ht|hu|hy|hz|ia|id|ie|ig|ii|ik|io|is|it|iu|ja|jv|ka|kg|ki|kj|kk|kl|km|kn|ko|kr|ks|ku|kv|kw|ky|la|lb|lg|li|ln|lo|lt|lu|lv|mg|mh|mi|mk|ml|mn|mr|ms|mt|my|na|nb|nd|ne|ng|nl|nn|no|nr|nv|ny|oc|oj|om|or|os|pa|pi|pl|ps|pt|qu|rm|rn|ro|ru|rw|sa|sc|sd|se|sg|si|sk|sl|sm|sn|so|sq|sr|ss|st|su|sv|sw|ta|te|tg|th|ti|tk|tl|tn|to|tr|ts|tt|tw|ty|ug|uk|ur|uz|ve|vi|vo|wa|wo|xh|yi|yo|za|zh|zu)[%delimiter%]"
                        },
                        new
                        {
                            Id = 3,
                            Classification = "LANGUAGES",
                            Description = "English and Dutch language only",
                            Name = "EN_AND_DUTCH",
                            Pattern = "[%delimiter%](aa|ab|ae|af|ak|am|an|ar|as|av|ay|az|ba|be|bg|bh|bi|bm|bn|bo|br|bs|ca|ce|ch|co|cr|cs|cu|cv|cy|da|de|dv|dz|ee|el|en|eo|es|et|eu|fa|ff|fi|fj|fo|fr|fy|ga|gd|gl|gn|gu|gv|ha|he|hi|ho|hr|ht|hu|hy|hz|ia|id|ie|ig|ii|ik|io|is|it|iu|ja|jv|ka|kg|ki|kj|kk|kl|km|kn|ko|kr|ks|ku|kv|kw|ky|la|lb|lg|li|ln|lo|lt|lu|lv|mg|mh|mi|mk|ml|mn|mr|ms|mt|my|na|nb|nd|ne|ng|nl|nn|no|nr|nv|ny|oc|oj|om|or|os|pa|pi|pl|ps|pt|qu|rm|rn|ro|ru|rw|sa|sc|sd|se|sg|si|sk|sl|sm|sn|so|sq|sr|ss|st|su|sv|sw|ta|te|tg|th|ti|tk|tl|tn|to|tr|ts|tt|tw|ty|ug|uk|ur|uz|ve|vi|vo|wa|wo|xh|yi|yo|za|zh|zu)[%delimiter%]"
                        },
                        new
                        {
                            Id = 4,
                            Classification = "LANGUAGES",
                            Description = "Allow all languages except for Hebrew",
                            Name = "HE banned",
                            Pattern = "[%delimiter%](aa|ab|ae|af|ak|am|an|ar|as|av|ay|az|ba|be|bg|bh|bi|bm|bn|bo|br|bs|ca|ce|ch|co|cr|cs|cu|cv|cy|da|de|dv|dz|ee|el|en|eo|es|et|eu|fa|ff|fi|fj|fo|fr|fy|ga|gd|gl|gn|gu|gv|ha|he|hi|ho|hr|ht|hu|hy|hz|ia|id|ie|ig|ii|ik|io|is|it|iu|ja|jv|ka|kg|ki|kj|kk|kl|km|kn|ko|kr|ks|ku|kv|kw|ky|la|lb|lg|li|ln|lo|lt|lu|lv|mg|mh|mi|mk|ml|mn|mr|ms|mt|my|na|nb|nd|ne|ng|nl|nn|no|nr|nv|ny|oc|oj|om|or|os|pa|pi|pl|ps|pt|qu|rm|rn|ro|ru|rw|sa|sc|sd|se|sg|si|sk|sl|sm|sn|so|sq|sr|ss|st|su|sv|sw|ta|te|tg|th|ti|tk|tl|tn|to|tr|ts|tt|tw|ty|ug|uk|ur|uz|ve|vi|vo|wa|wo|xh|yi|yo|za|zh|zu)[%delimiter%]"
                        },
                        new
                        {
                            Id = 5,
                            Classification = "YEAR",
                            Description = "Allow current year only",
                            Name = "Current year only",
                            Pattern = "[%delimiter%](%current_year%)[%delimiter%]"
                        },
                        new
                        {
                            Id = 6,
                            Classification = "INTERNAL",
                            Description = "Describes if released for internal purpose",
                            Name = "Internal",
                            Pattern = "([%delimiter%](INT|INTERNAL)[%delimiter%])"
                        },
                        new
                        {
                            Id = 7,
                            Classification = "MAX CDS",
                            Description = "less or equal to 3 CDs",
                            Name = "3 Max CDs",
                            Pattern = "[-\\(](([4-9])|([1-9][0-9])+)CDS?[-\\)]"
                        },
                        new
                        {
                            Id = 8,
                            Classification = "SAFE_GROUPS",
                            Description = "contains mp3 safe groups",
                            Name = "Mp3 safe groups",
                            Pattern = "[-](TSP|SIQ|GNVR|ROD|AGD|B2R|ALPMP3|WLM|CR|AGW|MUJI|ENTiTLED)"
                        },
                        new
                        {
                            Id = 9,
                            Classification = "SOURCES",
                            Description = "CD regex",
                            Name = "CD",
                            Pattern = "[%delimiter%](cd|retail|cdm)[%delimiter%]"
                        },
                        new
                        {
                            Id = 10,
                            Classification = "SOURCES",
                            Description = "Bootleg regex",
                            Name = "BOOTLEG",
                            Pattern = "[%delimiter%](bootleg)[%delimiter%]"
                        },
                        new
                        {
                            Id = 11,
                            Classification = "SOURCES",
                            Description = "DVD regex",
                            Name = "DVD",
                            Pattern = "[%delimiter%](dvd)[%delimiter%]"
                        },
                        new
                        {
                            Id = 12,
                            Classification = "SOURCES",
                            Description = "Homemade regex",
                            Name = "HOMEMADE",
                            Pattern = "[%delimiter%](Homemade)[%delimiter%]"
                        },
                        new
                        {
                            Id = 13,
                            Classification = "SOURCES",
                            Description = "Magazing regex",
                            Name = "MAG",
                            Pattern = "[%delimiter%](mag|magazine)[%delimiter%]"
                        },
                        new
                        {
                            Id = 14,
                            Classification = "SOURCES",
                            Description = "Sampler regex",
                            Name = "SAMPLER",
                            Pattern = "[%delimiter%](Sampler)[%delimiter%]"
                        },
                        new
                        {
                            Id = 15,
                            Classification = "SOURCES",
                            Description = "TV regex",
                            Name = "TV",
                            Pattern = "[%delimiter%](tv)[%delimiter%]"
                        },
                        new
                        {
                            Id = 16,
                            Classification = "SOURCES",
                            Description = "Vinyl regex",
                            Name = "VINYL",
                            Pattern = "[%delimiter%](vinyl|vls|ep|lp)[%delimiter%]"
                        },
                        new
                        {
                            Id = 17,
                            Classification = "SOURCES",
                            Description = "Web regex",
                            Name = "WEB",
                            Pattern = "[%delimiter%](web|freeweb)[%delimiter%]"
                        },
                        new
                        {
                            Id = 18,
                            Classification = "SOURCES",
                            Description = "Demo regex",
                            Name = "DEMO",
                            Pattern = "[%delimiter%](demo)[%delimiter%]"
                        },
                        new
                        {
                            Id = 19,
                            Classification = "SOURCES",
                            Description = "Promo regex",
                            Name = "PROMO",
                            Pattern = "[%delimiter%](promo)[%delimiter%]"
                        },
                        new
                        {
                            Id = 20,
                            Classification = "XPOP",
                            Description = "Foreign pop regex",
                            Name = "xPOP",
                            Pattern = "[%delimiter%]((K|X|J)POP)[%delimiter%]"
                        },
                        new
                        {
                            Id = 21,
                            Classification = "SOURCES",
                            Description = "Digipak regex",
                            Name = "DIGIPAK",
                            Pattern = "[%delimiter%](digipak)[%delimiter%]"
                        },
                        new
                        {
                            Id = 22,
                            Classification = "SOURCES",
                            Description = "Tape regex",
                            Name = "TAPE",
                            Pattern = "[%delimiter%](tape|mixtape)[%delimiter%]"
                        },
                        new
                        {
                            Id = 23,
                            Classification = "SOURCES",
                            Description = "Audio book regex",
                            Name = "ABOOK",
                            Pattern = "[%delimiter%](abook|audiobook)[%delimiter%]"
                        },
                        new
                        {
                            Id = 24,
                            Classification = "SOURCES",
                            Description = "Cdm regex",
                            Name = "CDM",
                            Pattern = "[%delimiter%](cdm)[%delimiter%]"
                        },
                        new
                        {
                            Id = 25,
                            Classification = "SOURCES",
                            Description = "Cds regex",
                            Name = "CDS",
                            Pattern = "[%delimiter%](cds)[%delimiter%]"
                        },
                        new
                        {
                            Id = 26,
                            Classification = "SOURCES",
                            Description = "Live in regex",
                            Name = "LIVE_IN",
                            Pattern = "[%delimiter%](live_in)[%delimiter%]"
                        },
                        new
                        {
                            Id = 27,
                            Classification = "SOURCES",
                            Description = "Live at regex",
                            Name = "LIVE_AT",
                            Pattern = "[%delimiter%](live_at)[%delimiter%]"
                        },
                        new
                        {
                            Id = 28,
                            Classification = "SOURCES",
                            Description = "Cable regex",
                            Name = "CABLE",
                            Pattern = "[%delimiter%](cable)[%delimiter%]"
                        },
                        new
                        {
                            Id = 29,
                            Classification = "SOURCES",
                            Description = "Dvb regex",
                            Name = "DVB",
                            Pattern = "[%delimiter%](dvb(s)?)[%delimiter%]"
                        },
                        new
                        {
                            Id = 30,
                            Classification = "SOURCES",
                            Description = "Dat regex",
                            Name = "DAT",
                            Pattern = "[%delimiter%](dat)[%delimiter%]"
                        },
                        new
                        {
                            Id = 31,
                            Classification = "SOURCES",
                            Description = "Sbd regex",
                            Name = "SBD",
                            Pattern = "[%delimiter%](sbd)[%delimiter%]"
                        },
                        new
                        {
                            Id = 32,
                            Classification = "SOURCES",
                            Description = "dab regex",
                            Name = "DAB",
                            Pattern = "[%delimiter%](dab)[%delimiter%]"
                        },
                        new
                        {
                            Id = 33,
                            Classification = "SOURCES",
                            Description = "Radio regex",
                            Name = "RADIO",
                            Pattern = "[%delimiter%](radio)[%delimiter%]"
                        },
                        new
                        {
                            Id = 34,
                            Classification = "SOURCES",
                            Description = "Line regex",
                            Name = "LINE",
                            Pattern = "[%delimiter%](line)[%delimiter%]"
                        },
                        new
                        {
                            Id = 35,
                            Classification = "SOURCES",
                            Description = "FreshFM regex",
                            Name = "FRESHFM",
                            Pattern = "[%delimiter%](freshfm)[%delimiter%]"
                        },
                        new
                        {
                            Id = 36,
                            Classification = "SOURCES",
                            Description = "FM regex",
                            Name = "FM",
                            Pattern = "[%delimiter%](FM)[%delimiter%]"
                        },
                        new
                        {
                            Id = 37,
                            Classification = "SOURCES",
                            Description = "SAT regex",
                            Name = "SAT",
                            Pattern = "[%delimiter%](SAT)[%delimiter%]"
                        });
                });

            modelBuilder.Entity("Boomerang.Models.Models.ComplexWordMap", b =>
                {
                    b.HasOne("Boomerang.Models.Models.ComplexWord", "ComplexWord")
                        .WithMany("Words")
                        .HasForeignKey("ComplexWordId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Boomerang.Models.Models.Word", "Word")
                        .WithMany("ComplexWords")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Boomerang.Models.Models.Enrollment", b =>
                {
                    b.HasOne("Boomerang.Models.Models.Section", "Section")
                        .WithMany("Enrollments")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Boomerang.Models.Models.Site", "Site")
                        .WithMany("Enrollments")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Boomerang.Models.Models.IrcInfo", b =>
                {
                    b.HasOne("Boomerang.Models.Models.Site", "Site")
                        .WithMany("IrcInfo")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Boomerang.Models.Models.Package", b =>
                {
                    b.HasOne("Boomerang.Models.Models.ComplexWord", "ComplexWord")
                        .WithMany("Packages")
                        .HasForeignKey("ComplexWordId");

                    b.HasOne("Boomerang.Models.Models.Word", "Word")
                        .WithMany("Packages")
                        .HasForeignKey("WordId");
                });

            modelBuilder.Entity("Boomerang.Models.Models.PackageEnrollment", b =>
                {
                    b.HasOne("Boomerang.Models.Models.Enrollment", "Enrollment")
                        .WithMany("Packages")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Boomerang.Models.Models.Package", "Package")
                        .WithMany("Enrollments")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Boomerang.Models.Models.Section", b =>
                {
                    b.HasOne("Boomerang.Models.Models.Category", "Category")
                        .WithMany("Sections")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Boomerang.Models.Models.Package", "Package")
                        .WithMany("Sections")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
